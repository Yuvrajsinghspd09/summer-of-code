# optimal approach O(n) - peak valley/greedy
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                max_profit += prices[i] - prices[i - 1]
         return max_profit



# brute force O(2^n approach)
from typing import List

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        def maxProfitRecursive(prices):
            if not prices or len(prices) <= 1:
                return 0
            
            max_profit = 0
            for i in range(len(prices)):
                max_profit_today = 0
                for j in range(i + 1, len(prices)):
                    if prices[j] > prices[i]:
                        profit = prices[j] - prices[i] + maxProfitRecursive(prices[j + 1:])
                        max_profit_today = max(max_profit_today, profit)
                max_profit = max(max_profit, max_profit_today)
            
            return max_profit
        
        return maxProfitRecursive(prices)

# Example usage:
solution = Solution()
print(solution.maxProfit([7, 1, 5, 3, 6, 4]))  # Output: 7
print(solution.maxProfit([1, 2, 3, 4, 5]))    # Output: 4
print(solution.maxProfit([7, 6, 4, 3, 1]))    # Output: 0
