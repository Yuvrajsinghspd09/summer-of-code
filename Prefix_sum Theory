'''
Prefix Sum Algorithm Explained:
The prefix sum algorithm, also known as cumulative sum, is a technique used to calculate the running total of a sequence of numbers. It creates an array where each element is the sum of all previous elements in the original array, including the current element.

Here's a step-by-step explanation:

Start with an input array of numbers.
Create a new array of the same length.
Set the first element of the new array to be the same as the first element of the input array.
For each subsequent element, calculate the sum of the previous element in the prefix sum array and the current element in the input array.

'''

def prefix_sum(arr):
    prefix =[0]*n
    prefix[0]=arr[0]
    for i in range(arr):
        prefix[i]= arr[i]+prefix[i-1]
    return prefix




'''

'''
Certainly, I'll explain in depth when to use the prefix sum algorithm. This technique is versatile and can be applied in various scenarios, particularly when dealing with array manipulations and optimizing certain types of queries.

Range Sum Queries

The most common use case for prefix sum is when you need to perform multiple range sum queries on a static array.

Why it's useful: Without prefix sum, each range sum query would require O(n) time to calculate, where n is the size of the range. With prefix sum, you can reduce this to O(1) time per query after an initial O(n) preprocessing.
Example scenario: You have an array representing daily temperatures for a year, and you need to frequently calculate the total temperature for various date ranges.


Cumulative Data Analysis

Prefix sum is excellent for problems involving cumulative data or running totals.

Why it's useful: It allows you to quickly determine the accumulated value up to any point in an array.
Example scenarios:

Calculating cumulative rainfall over time
Analyzing cumulative stock prices
Tracking running totals in financial data




Subarray Sum Problems

Many problems involving subarray sums can be optimized using prefix sum.

Why it's useful: It allows you to quickly calculate the sum of any subarray by subtracting two prefix sums.
Example problems:

Finding a subarray with a given sum
Counting the number of subarrays with sum equal to k
Determining the longest subarray with sum less than or equal to k




Difference Array (Variant of Prefix Sum)

A variation of prefix sum called the difference array is useful for range update queries.

Why it's useful: It allows you to perform range updates in O(1) time instead of O(n).
Example scenario: You need to add a value to all elements in a range of an array multiple times.


2D Array Problems

Prefix sum can be extended to 2D arrays for efficient rectangular region sum calculations.

Why it's useful: It reduces the time complexity of calculating the sum of elements in a rectangular region from O(mn) to O(1), after O(mn) preprocessing.
Example scenario: Image processing tasks where you need to calculate the sum of pixel values in various rectangular regions.


Sliding Window Problems

Some sliding window problems can be optimized using prefix sum.

Why it's useful: It can help maintain the sum of the current window efficiently.
Example scenario: Finding the maximum sum subarray of a fixed size.


Problems Involving Modular Arithmetic

Prefix sum can be particularly useful in problems involving modular arithmetic and subarray sums.

Why it's useful: It can help identify subarrays with sums divisible by a given number.
Example problem: Finding the number of subarrays with sum divisible by k.


Time Series Analysis

In time series data, prefix sum can be used to efficiently calculate moving averages or cumulative metrics.

Why it's useful: It allows for quick computation of aggregate values over any time range.
Example scenario: Calculating the moving average of stock prices over various time windows.


Optimization Problems

Some optimization problems can be solved more efficiently using prefix sum.

Why it's useful: It can help identify optimal subarrays or partition points in an array.
Example problem: Finding the partition point that minimizes the difference between the sum of left and right subarrays.


Problems with Arithmetic Progressions

Prefix sum can be useful in problems involving arithmetic progressions or sequences with a pattern.

Why it's useful: It can help identify subarrays that form arithmetic sequences or have specific properties.
Example problem: Finding the number of arithmetic slices in an array.
'''

Here are some LeetCode question numbers that involve the use of prefix sum:

303 - Range Sum Query - Immutable
304 - Range Sum Query 2D - Immutable
560 - Subarray Sum Equals K
724 - Find Pivot Index = 1991 Find the Middle Index in Array
1480 - Running Sum of 1d Array
238 - Product of Array Except Self (variation using prefix and suffix products)
523 - Continuous Subarray Sum
974 - Subarray Sums Divisible by K

1031 - Maximum Sum of Two Non-Overlapping Subarrays
1314 - Matrix Block Sum


'''
